<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Observable Library</name>
    </assembly>
    <members>
        <member name="T:Flynn1179.Observable.DisposableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:Flynn1179.Observable.INotifyDisposed"/> interface.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObject.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Flynn1179.Observable.DisposableObject"/> class.
            </summary>
            <remarks>Does not call 'DoDispose', as finalizing objects should not be setting properties or raising events.</remarks>
        </member>
        <member name="E:Flynn1179.Observable.DisposableObject.Disposing">
            <summary>
            Occurs before the instance disposes.
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="E:Flynn1179.Observable.DisposableObject.Disposed">
            <summary>
            Occurs after the instance disposes.
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="P:Flynn1179.Observable.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether or not this instance is disposed.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Disposes any managed resources or unmanaged resources.
            </summary>
            <param name="disposing">True if the <see cref="M:Flynn1179.Observable.DisposableObject.Dispose"/> method was called, false if the finalizer was called.</param>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObject.DoDispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the <see cref="M:Flynn1179.Observable.DisposableObject.Dispose"/> method was called, false if the finalizer was called.</param>
        </member>
        <member name="T:Flynn1179.Observable.DisposableObservableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:Flynn1179.Observable.INotifyDisposed"/>, <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interfaces.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObservableObject.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Flynn1179.Observable.DisposableObservableObject"/> class.
            </summary>
            <remarks>Does not call 'DoDispose', as finalizing objects should not be setting properties or raising events.</remarks>
        </member>
        <member name="E:Flynn1179.Observable.DisposableObservableObject.Disposing">
            <summary>
            Occurs before the instance disposes;
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="E:Flynn1179.Observable.DisposableObservableObject.Disposed">
            <summary>
            Occurs after the instance disposes.
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="P:Flynn1179.Observable.DisposableObservableObject.IsDisposed">
            <summary>
            Gets a value indicating whether or not this instance is disposed.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObservableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObservableObject.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the <see cref="M:Flynn1179.Observable.DisposableObservableObject.Dispose"/> method was called, false if the finalizer was called.</param>
        </member>
        <member name="M:Flynn1179.Observable.DisposableObservableObject.DoDispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the <see cref="M:Flynn1179.Observable.DisposableObservableObject.Dispose"/> method was called, false if the finalizer was called.</param>
        </member>
        <member name="T:Flynn1179.Observable.INotifyDisposed">
            <summary>
            Represents events and properties for an object that implements IDisposable, and also has a queriable <see cref="P:Flynn1179.Observable.INotifyDisposed.IsDisposed"/> property and
            <see cref="E:Flynn1179.Observable.INotifyDisposed.Disposing"/> and <see cref="E:Flynn1179.Observable.INotifyDisposed.Disposed"/> events.
            </summary>
        </member>
        <member name="E:Flynn1179.Observable.INotifyDisposed.Disposing">
            <summary>
            Occurs before the instance is disposed.
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="E:Flynn1179.Observable.INotifyDisposed.Disposed">
            <summary>
            Occurs after the instance is disposed.
            </summary>
            <remarks>This is not raised if it was the finalizer that disposed it.</remarks>
        </member>
        <member name="P:Flynn1179.Observable.INotifyDisposed.IsDisposed">
            <summary>
            Gets a value indicating whether the instance is disposed or not.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.ISynchronizedObject">
            <summary>
            Defines properties for an object that has a <see cref="T:System.Threading.SynchronizationContext"/> on which to raise events.
            </summary>
        </member>
        <member name="P:Flynn1179.Observable.ISynchronizedObject.SynchronizationContext">
            <summary>
            Gets the synchronization context to raise events on.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.ObservableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interfaces.
            </summary>
        </member>
        <member name="E:Flynn1179.Observable.ObservableObject.PropertyChanging">
            <summary>
            Occurs before a property of this object changes.
            </summary>
        </member>
        <member name="E:Flynn1179.Observable.ObservableObject.PropertyChanged">
            <summary>
            Occurs after a property of this object changes.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.OnPropertyChanging(System.String)">
            <summary>
            Default implementation of the OnPropertyChanging method that just raises the event.
            </summary>
            <param name="propertyName">The name of the property to raise an event for.</param>
            <exception cref="T:System.ArgumentException">Throw if the property does not exist on the target, if a debugger is attached.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Default implementation of the OnPropertyChanged method that just raises the event.
            </summary>
            <param name="propertyName">The name of the property to raise an event for.</param>
            <exception cref="T:System.ArgumentException">Throw if the property does not exist on the target, if a debugger is attached.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Action,System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Action{System.String},System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Func{System.String,System.String},System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Action,System.Func{System.String,System.String},System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Action{System.String},System.Func{System.String,System.String},System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action{``0},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action{``0},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action{``0},System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action{``0},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action{``0},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action{``0},System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,``0,``0,System.String)">
            <summary>
            Changes the value of a property after checking it's within a given range, and if it changed, raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the backing field for the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="min">The minimum permitted value for the property.</param>
            <param name="max">The maximum permitted value for the property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the property was changed, false if it already held the desired value.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,``0,``0,System.Action,System.String)">
            <summary>
            Changes the value of a property after checking it's within a given range, and if it changed, raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the backing field for the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="min">The minimum permitted value for the property.</param>
            <param name="max">The maximum permitted value for the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the property was changed, false if it already held the desired value.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,``0,``0,System.Action{``0},System.String)">
            <summary>
            Changes the value of a property after checking it's within a given range, and if it changed, raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the backing field for the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="min">The minimum permitted value for the property.</param>
            <param name="max">The maximum permitted value for the property.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the property was changed, false if it already held the desired value.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set(System.String@,System.String,System.Action,System.Action{System.String},System.Func{System.String,System.String},System.String)">
            <summary>
            Sets the value of the referenced field if it wasn't already the same, and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="field">A reference to the field to change.</param>
            <param name="value">The new value of the field.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that exposes this field.</param>
            <returns>True if the field was changed and the event was raised, false if it already had the value given.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.Action{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Action,System.Action{``0},System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.Action{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,System.Boolean,System.Action,System.Action{``0},System.Func{``0,System.String},System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Called by inheriting classes to set the value of a property and raise a changed event if it has actually changed. This will take no action if the
            value of the property is already the value it's being set to, and raise no events. If the value was changed and was previously not null, it is
            disposed.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the underlying private field to change.</param>
            <param name="value">The new value of the property.</param>
            <param name="disposePrevious">If true and the previous value was disposable, it will be disposed.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="validate">A function to validate the new value of the property.</param>
            <param name="changeHandler">An event handler to handle any property changed events on the target.</param>
            <param name="propertyName">The name of the property that's changing.</param>
            <returns>True if the field was changed, false otherwise.</returns>
        </member>
        <member name="M:Flynn1179.Observable.ObservableObject.Set``1(``0@,``0,``0,``0,System.Action,System.Action{``0},System.String)">
            <summary>
            Changes the value of a property after checking it's within a given range, and if it changed, raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="TProp">The type of the property being changed.</typeparam>
            <param name="field">A reference to the backing field for the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="min">The minimum permitted value for the property.</param>
            <param name="max">The maximum permitted value for the property.</param>
            <param name="onChange">An action to be invoked after the property has changed value.</param>
            <param name="onChangeWithPrevious">An action to be invoked after the property has changed value, with the previous value passed as a parameter to the action.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the property was changed, false if it already held the desired value.</returns>
        </member>
        <member name="T:Flynn1179.Observable.SynchronizedDisposableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:Flynn1179.Observable.INotifyDisposed"/> and <see cref="T:Flynn1179.Observable.ISynchronizedObject"/> interfaces.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedDisposableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedDisposableObject"/> class.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedDisposableObject.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedDisposableObject"/> class with the specified context.
            </summary>
            <param name="newContext">The <see cref="P:Flynn1179.Observable.SynchronizedDisposableObject.SynchronizationContext"/> used for event invocation.</param>
        </member>
        <member name="P:Flynn1179.Observable.SynchronizedDisposableObject.SynchronizationContext">
            <summary>
            Gets the synchronization context to raise events on.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.SynchronizedDisposableObservableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:Flynn1179.Observable.INotifyDisposed"/>, <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>, <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:Flynn1179.Observable.ISynchronizedObject"/> interfaces.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedDisposableObservableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedDisposableObservableObject"/> class.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedDisposableObservableObject.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedDisposableObservableObject"/> class with the specified context.
            </summary>
            <param name="newContext">The <see cref="P:Flynn1179.Observable.SynchronizedDisposableObservableObject.SynchronizationContext"/> used for event invocation.</param>
        </member>
        <member name="P:Flynn1179.Observable.SynchronizedDisposableObservableObject.SynchronizationContext">
            <summary>
            Gets the synchronization context to raise events on.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.SynchronizedObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:Flynn1179.Observable.ISynchronizedObject"/> interface.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedObject"/> class.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedObject.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedObject"/> class with the specified context.
            </summary>
            <param name="newContext">The <see cref="P:Flynn1179.Observable.SynchronizedObject.SynchronizationContext"/> used for event invocation.</param>
        </member>
        <member name="P:Flynn1179.Observable.SynchronizedObject.SynchronizationContext">
            <summary>
            Gets the synchronization context to raise events on.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.SynchronizedObservableObject">
            <summary>
            Defines a base class for an object that implements the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>, <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:Flynn1179.Observable.ISynchronizedObject"/> interfaces.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedObservableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedObservableObject"/> class.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.SynchronizedObservableObject.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Flynn1179.Observable.SynchronizedObservableObject"/> class with the specified context.
            </summary>
            <param name="newContext">The <see cref="P:Flynn1179.Observable.SynchronizedObservableObject.SynchronizationContext"/> used for event invocation.</param>
        </member>
        <member name="P:Flynn1179.Observable.SynchronizedObservableObject.SynchronizationContext">
            <summary>
            Gets the synchronization context to raise events on.
            </summary>
        </member>
        <member name="T:Flynn1179.Observable.Extensions">
            <summary>
            General purpose utility and extension methods.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handler">The event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments for the event.</param>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handler">The event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments for the event.</param>
            <typeparam name="T">The type of the event arguments for the event.</typeparam>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.EventHandler,Flynn1179.Observable.ISynchronizedObject,System.EventArgs)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handler">The event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments for the event.</param>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.ComponentModel.PropertyChangedEventHandler,System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handler">The event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the property relating to this event.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.ArgumentException">Thrown if sender is not null, and the type of object in the sender does not have the named property.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
            <remarks>For static events, the type raising the event is not passed in to this function, so no check can be performed on whether or not the class raising the event has the static property.</remarks>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.Collections.Generic.IEnumerable{System.ComponentModel.PropertyChangedEventHandler},System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handlers">A list of <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the property relating to this event.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.ArgumentException">Thrown if sender is not null, and the type of object in the sender does not have the named property.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
            <remarks>For static events, the type raising the event is not passed in to this function, so no check can be performed on whether or not the class raising the event has the static property.</remarks>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.ComponentModel.PropertyChangingEventHandler,System.ComponentModel.INotifyPropertyChanging,System.String)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handler">The event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the property relating to this event.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.SafeRaise(System.Collections.Generic.IEnumerable{System.ComponentModel.PropertyChangingEventHandler},System.ComponentModel.INotifyPropertyChanging,System.String)">
            <summary>
            Raises an event safely, ensuring that all handlers are called on the proper thread, and any exceptions do not prevent other handlers being called.
            </summary>
            <param name="handlers">A list of <see cref="T:System.ComponentModel.PropertyChangingEventHandler"/> to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the property relating to this event.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if propertyName is null or an empty string.</exception>
            <exception cref="T:System.AggregateException">Thrown if any handlers raise exceptions, with the exceptions raised captured in the <see cref="P:System.AggregateException.InnerExceptions"/> property.</exception>
        </member>
        <member name="M:Flynn1179.Observable.Extensions.ValidatePropertyName(System.Type,System.String,System.String)">
            <summary>
            Checks if a property name is valid for a given type.
            </summary>
            <param name="type">The type to check the property of.</param>
            <param name="propertyName">The name of the property to check.</param>
            <param name="paramName">The name of the parameter the property name was passed by.</param>
            <exception cref="T:System.ArgumentException">Thrown if the propertyName is not the name of a property on the given type.</exception>
        </member>
        <member name="T:Flynn1179.Observable.InternalExtensions">
            <summary>
            Defines extension methods internal to this project. Most of these are intended to be in-lined.
            </summary>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is null.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the object is null.</exception>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the string is null or empty.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string is null or empty.</exception>
            <param name="message">The error message to include in the exception. Defaults to 'Argument out of range'.</param>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.ThrowIfOutOfRange``1(``0,System.String,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the parameter is outside the specified range.
            </summary>
            <typeparam name="T">The type of parameter to check.</typeparam>
            <param name="parameter">The parameter to check the value of.</param>
            <param name="name">The name of the parameter to check.</param>
            <param name="minimum">The minimum value acceptable as the parameter, inclusive.</param>
            <param name="maximum">The maximum value acceptable as the parameter, inclusive.</param>
            <param name="message">The error message to include in the exception. Defaults to 'Argument out of range'.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the parameter is out of range.</exception>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.ThrowIfCheckFails``1(``0,System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the parameter does not meet a given predicate.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="parameter">The parameter to check the value of.</param>
            <param name="name">The name of the parameter to check.</param>
            <param name="predicate">A predicate to test the parameter against.</param>
            <param name="message">The message to include in the exception if the check fails.</param>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.ThrowIfCheckFails(System.Object,System.String,System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the parameter has failed a check.
            </summary>
            <param name="parameter">The parameter to check the value of. This is passed as parameter 0 to a string.Format call, passing 'message' as the format string.</param>
            <param name="name">The name of the parameter to check.</param>
            <param name="checkPassed">True if an exception should not be raised, false otherwise.</param>
            <param name="message">The message to include in the exception if the check failed.</param>
            <remarks>This overload exists where the check is trivial to perform in client code, and doesn't need the complexity of a predicate.</remarks>
        </member>
        <member name="M:Flynn1179.Observable.InternalExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of a named property on the target.
            </summary>
            <param name="target">The target to find the property on.</param>
            <param name="propertyName">The name of the property to get the value of.</param>
            <returns>The value on the named property of the target object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the target parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the propertyName parameter is null or empty.</exception>
        </member>
        <member name="T:Flynn1179.Observable.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Flynn1179.Observable.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Flynn1179.Observable.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Flynn1179.Observable.Properties.Resources.PropertyNotFoundError">
            <summary>
              Looks up a localized string similar to Property does not exist..
            </summary>
        </member>
        <member name="P:Flynn1179.Observable.Properties.Resources.SafeRaiseExceptionMessage">
            <summary>
              Looks up a localized string similar to Errors raised by event handlers.
            </summary>
        </member>
    </members>
</doc>
